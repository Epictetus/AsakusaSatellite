-# -*- coding: utf-8 -*-
.chat_room_top= raw(call_hook(:chat_room_top, :room => @room))
.yield
 %div.room-info
  %div
   .left
    %h3.title
     - if @room.user == current_user
      = on_the_spot_edit @room, :title
     - else
      = @room.title
   .right
    =image_tag("connection_fail.gif", :class => 'websocket-status', :alt => t(:websocket_status), :title => t(:websocket_status))
    - if logged?
     = form_tag({:controller => :room, :action => :delete, :id => @room}, {:onsubmit => "return confirm('#{t(:are_you_sure_you_want_to_delete_this_room)}');", :action => :post, :class => 'delete-form'}) do
      = image_submit_tag "action_stop.gif", :alt => t(:delete_this_room), :title => t(:delete_this_room)
   .clear
  - unless @room.user.nil?
   %div.room-owner
    = t(:room_created_by) + " "
    %img.profile{:src => @room.user.profile_image_url, :alt => @room.user.screen_name}
    = @room.user.name
  %div.room-date
   = t(:created_at) + " " + l(@room.created_at)
 %div{:id => 'read-more'}
  read more
 .message-list
  - @messages.reverse_each do |message|
   = render :partial => 'message', :locals => { :message => message }
 - if logged?
  .input
   = form_for :chat, :url => {:controller => :chat, :action => :message, :room_id => @room.id }, :html => {:class => :inputarea} do |f|
    =text_area_tag :message, '', :class => :text, :autofocus=>true, :placeholder=> t('placeholder_message')
    =submit_tag t(:send), :class => 'submit red button large', :id => 'send'
.chat_room_bottom= raw(call_hook(:chat_room_bottom, :room => @room))

= content_for :javascripts do
 = javascript_include_tag :on_the_spot
 = javascript_include_tag 'jquery.dropUploader'
 = javascript_include_tag "jquery.websocket"
 = javascript_include_tag "jquery.multiline"
 = javascript_include_tag "jquery.onthespot"
 = javascript_include_tag "jquery.scrollTo-min"
 = javascript_include_tag "jquery.desktopnotify"
 :javascript
  $(function() {
    function autoScroll(){
      $(window).scrollTo( $(".message-list .message:last"), 500, { easing:'swing', queue:true, axis:'y' } );
    }

    // on the spot
    function onTheSpot(dom){
      // You can edit your own message
      if (dom.find('.screen-name').text() == "#{current_user.nil? ? '' : current_user.screen_name}") {
        var body = dom.find(".body");
        body.onTheSpot({
          url  : '#{url_for(:action => 'update_message_on_the_spot')}',
          data : body.attr("original")
        });
        dom.find(".edit").bind("click",function(){ body.trigger("onTheSpot::start"); });

        // show edit button
        dom.hover(function(e) {
          $(this).find('.edit-icons').fadeIn();
        },function(e){
          $(this).find('.edit-icons').fadeOut();
        });
      }
    }
    $(".message").each(function(_, e){
      onTheSpot( $(e) );
    });

    // make div.message from object
    function makeElement(message){
      var dom = $(message.view);
      onTheSpot(dom);
      return dom;
    }
    $(".message-list").webSocket({ makeElement : makeElement, room : #{@room.id} });

    // read more button
    function activate(elem, f){
      elem.one('click',function(){
        f($(this), function(){ activate(elem, f); });
      });
    }

    activate($("#read-more"), function(elem, resume){
      var original = elem.text();
      var id = $(".message").first().attr("target");
      elem.addClass("loading").empty().html(#{image_tag('ajax-loader.gif').inspect});
      $.get("#{url_for(:action => :prev)}?id="+id, function(content){
        var dom = $(content).find(".message");
        elem.removeClass("loading");
        if( dom.length == 0){
          elem.empty().html("no more message");
        } else {
          // show loaded message
          dom.hide();
          $(".message-list").prepend(dom);
          dom.fadeIn();

          // restore buton status
          elem.empty().html(original);
          resume();
        }
      });
    });

    // messages send
    $('textarea#message').multiline();
    $(".message-list").bind('websocket::connect', function(_, ws){
      $('form.inputarea').bind('submit', function(e){
        e.stopPropagation();
        e.preventDefault();
        jQuery.post(
         '#{url_for(:controller=>'api/v1/message', :action=>'create')}',
         { 'room_id' : '#{@room.id}',
           'message' : $('textarea#message').val()});
        $('textarea#message').val('');
      });
    });

    // show status of websocket
    $(".message-list").bind('websocket::connect', function(){
      $("img.websocket-status").attr('src', '#{image_path('connection.gif')}');
    });
    $(".message-list").bind('websocket::error', function(){
      $("img.websocket-status").attr('src', '#{image_path('connection_fail.gif')}');
    });

    // scroll after loaded
    $(".message-list").bind('websocket::create', function(){
       autoScroll();
    });
    function scrollAfterImage(e){
      $(".attachment img", e).bind("load", function(){
        autoScroll();
      });
    }
    autoScroll();
    scrollAfterImage($(".message-list"))

    // message notification
    $(".message-list").bind('websocket::create', function(_, message){
      if(message.screen_name != "#{current_user.nil? ? '' : current_user.screen_name}") {
        $.fn.desktopNotify({
            picture: message.profile_image_url,
            title: message.name,
            text : (message.attachment != null ? message.attachment.filename : message.body)
        });
      }
    });
    $('#send').desktopNotifyAddPermission();

    // File DnD
    uploadConfig = {
      action : "#{url_for(:controller => 'chat', :action => 'message')}",
      params : [{ room_id : '#{@room.id}'},
                 { authenticity_token: '#{ form_authenticity_token }'}],
      onProgress : function(value){
          console.log(value);
      },
      onPartialError : function(){
      },
      onComplete : function(){
      }
    };
    $('.message-list').dropUploader(uploadConfig);
    $('#message').dropUploader(uploadConfig);

    // edit-icons
    $('.message').live('mouseover', function() {
      if ($(this).find('.user-name').text() == "#{current_user.nil? ? '' : current_user.screen_name}") {
        $(this).find('.edit-icons').show();
      }
    }).bind('mouseout', function() {
      if ($(this).find('.user-name').text() == "#{current_user.nil? ? '' : current_user.screen_name}") {
        $(this).find('.edit-icons').hide();
      }
    });

  });

